(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{192:function(t,a,e){"use strict";e.r(a);var r=e(0),s=Object(r.a)({},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"原型链类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原型链类","aria-hidden":"true"}},[t._v("#")]),t._v(" 原型链类")]),t._v(" "),e("h4",{attrs:{id:"创建对象有几种放法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建对象有几种放法","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建对象有几种放法")]),t._v(" "),e("ul",[e("li",[t._v("对象字面量")]),t._v(" "),e("li",[t._v("new Object（）")]),t._v(" "),e("li",[t._v("new 构造函数（普通）")]),t._v(" "),e("li",[t._v("object.create()")])]),t._v(" "),e("h4",{attrs:{id:"原型-构造函数-实例-原型链"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原型-构造函数-实例-原型链","aria-hidden":"true"}},[t._v("#")]),t._v(" 原型 构造函数 实例 原型链")]),t._v(" "),e("h4",{attrs:{id:"instanceof原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#instanceof原理","aria-hidden":"true"}},[t._v("#")]),t._v(" instanceof原理")]),t._v(" "),e("ul",[e("li",[t._v("判断实例对象的proto与构造函数的prototype的引用是否相同(在这个原型链上的都可以)")])]),t._v(" "),e("h4",{attrs:{id:"new-运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#new-运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" new 运算符")]),t._v(" "),e("h2",{attrs:{id:"面向对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#面向对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 面向对象")]),t._v(" "),e("h4",{attrs:{id:"类的声明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类的声明","aria-hidden":"true"}},[t._v("#")]),t._v(" 类的声明")]),t._v(" "),e("ul",[e("li",[t._v("es6")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function Animal(){\n    this.name = name\n}\n")])])]),e("ul",[e("li",[t._v("es5")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class Animal2{\n    constructor(){\n        this.name = name\n    }\n}\n")])])]),e("ul",[e("li",[t._v("实例化")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("new Animal()  new Animal2()\n如果无参数，可以不写括号\n")])])]),e("ul",[e("li",[t._v("实现继承的几种方式\n"),e("ul",[e("li",[t._v("1）借用构造函数实现继承（无法继承父类原型）")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function Parent1(){\n    this.name = 'name'\n}\nfunction Child1(){\n// 通过call来将parent1的this指向改为child1\n    parent1.call(this)\n    this.type = 'type'\n}\nconsole.log(Child1())\n")])])]),e("ul",[e("li",[t._v("2）借助原型链实现继承(父类构造函数和原型上的属性和方法都被继承)")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 缺点：如果子类同时new多个实例，在某个实例上面添加属性，在另一个实例上面也可以取到\n   function Parents2(){\n       this.name = 'parents2'\n   }\n   function Child2(){\n       this.name = 'child2'\n   }\n   Child2.prototype =  new Parents2()\n   console.log(Child2())\n")])])]),e("ul",[e("li",[t._v("3）组合方式（结合上面两种方式的优点，去掉其缺点，但是自身缺点:1)父类构造函数执行了两次2)实例的的constructor指向父类构造函数）")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" function Parents3(){\n     this.name = 'parents3'\n     this.play = ['1', '2', '3']\n }\n function Child3(){\n     Parents3.call(this)\n     this.type = 'child3'\n }\n Child3.prototype = new Parents3()\n var c1 = new Child3()\n var c2 = new Child3()\n c1.play.push(4)\n")])])]),e("ul",[e("li",[e("ol",{attrs:{start:"4"}},[e("li",[t._v("组合继承的优化1（缺点：实例的的constructor指向父类构造函数）")])])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" function Parents3(){\n     this.name = 'parents3'\n     this.play = ['1', '2', '3']\n }\n function Child3(){\n     Parents3.call(this)\n     this.type = 'child3'\n }\n Child3.prototype =  Parents3.prototype\n var c1 = new Child3()\n var c2 = new Child3()\n c1.play.push(4)\n")])])]),e("ul",[e("li",[e("ol",{attrs:{start:"5"}},[e("li",[t._v("组合继承的优化2（实例指向子类构造函数）")])])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" function Parents3(){\n     this.name = 'parents3'\n     this.play = ['1', '2', '3']\n }\n function Child3(){\n     Parents3.call(this)\n     this.type = 'child3'\n }\n // 使用object.create创造一个新对象（第一个参数为新创建对象的原型对象）\n Child3.prototype = Object.create(Parents3.prototype)\n //手动指定 constructor\n Child3.prototype.constructor = Child3\n var c1 = new Child3()\n var c2 = new Child3()\n c1.play.push(4)\n")])])])])]),t._v(" "),e("h2",{attrs:{id:"dom事件类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dom事件类","aria-hidden":"true"}},[t._v("#")]),t._v(" DOM事件类")]),t._v(" "),e("h4",{attrs:{id:"dom标准定义的级别（dom标准定义的级别）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dom标准定义的级别（dom标准定义的级别）","aria-hidden":"true"}},[t._v("#")]),t._v(" DOM标准定义的级别（DOM标准定义的级别）")]),t._v(" "),e("ul",[e("li",[t._v("DOM0: element.onclick= function(){}")]),t._v(" "),e("li",[t._v("DOM2: element.addEventListener('click',function(){},false)")]),t._v(" "),e("li",[t._v("DOM3: element.addEventListener('keyup',function(){},false)")])]),t._v(" "),e("h4",{attrs:{id:"dom事件模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dom事件模型","aria-hidden":"true"}},[t._v("#")]),t._v(" DOM事件模型")]),t._v(" "),e("ul",[e("li",[t._v("捕获和冒泡")])]),t._v(" "),e("h4",{attrs:{id:"dom事件流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dom事件流","aria-hidden":"true"}},[t._v("#")]),t._v(" DOM事件流")]),t._v(" "),e("ul",[e("li",[t._v("捕获阶段 目标阶段 冒泡阶段")])]),t._v(" "),e("h4",{attrs:{id:"描述dom事件捕获的具体流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#描述dom事件捕获的具体流程","aria-hidden":"true"}},[t._v("#")]),t._v(" 描述DOM事件捕获的具体流程")]),t._v(" "),e("ul",[e("li",[t._v("window document html body ... 目标元素")])]),t._v(" "),e("h4",{attrs:{id:"描述dom事件冒泡的具体流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#描述dom事件冒泡的具体流程","aria-hidden":"true"}},[t._v("#")]),t._v(" 描述DOM事件冒泡的具体流程")]),t._v(" "),e("ul",[e("li",[t._v("上面这个问题答案的倒序")])]),t._v(" "),e("h4",{attrs:{id:"event对象的常见应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#event对象的常见应用","aria-hidden":"true"}},[t._v("#")]),t._v(" event对象的常见应用")]),t._v(" "),e("ul",[e("li",[t._v("event.preventDefault() 阻止默认事件（例如a标签的跳转）")]),t._v(" "),e("li",[t._v("event.stopPropagation() 阻止冒泡事件")]),t._v(" "),e("li",[t._v("event.stopimmediatePropagetion() 事件优先级（例如在一个注册事件中，写上这句话，阻止下一个事件的触发）")]),t._v(" "),e("li",[t._v("后两者通常用于事件代理：")]),t._v(" "),e("li",[t._v("event.target 当前被点击的元素")]),t._v(" "),e("li",[t._v("event.currentTarget 当前绑定事件的对象")])]),t._v(" "),e("h4",{attrs:{id:"自定义事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义事件","aria-hidden":"true"}},[t._v("#")]),t._v(" 自定义事件")]),t._v(" "),e("h2",{attrs:{id:"http协议类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http协议类","aria-hidden":"true"}},[t._v("#")]),t._v(" http协议类")]),t._v(" "),e("h4",{attrs:{id:"http协议的主要特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http协议的主要特点","aria-hidden":"true"}},[t._v("#")]),t._v(" http协议的主要特点")]),t._v(" "),e("ul",[e("li",[t._v("简单快速：（每一个资源（一个页面地址，一个图片等），在http处理过程中还是很方便的，我想访问某个资源，只需要输入这个URI就可以了）")]),t._v(" "),e("li",[t._v("灵活：在每个http 头部会有一个数据类型，通过一个http协议就可以完成不同数据类型的传输")]),t._v(" "),e("li",[t._v("无连接：指的是连接一次，它就会断掉，不会保持连接")]),t._v(" "),e("li",[t._v("无状态：指的是客户端和服务端没有办法区分两次连接是否是同一个身份")])]),t._v(" "),e("h4",{attrs:{id:"http报文的组成部分"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http报文的组成部分","aria-hidden":"true"}},[t._v("#")]),t._v(" http报文的组成部分")]),t._v(" "),e("ul",[e("li",[t._v("请求报文\n"),e("ul",[e("li",[t._v("请求行（http方法，页面地址，http 协议以及版本）")]),t._v(" "),e("li",[t._v("请求头（就是一些key-value值，来告诉服务端我要哪些内容，要什么类型）")]),t._v(" "),e("li",[t._v("空行")]),t._v(" "),e("li",[t._v("请求体")])])]),t._v(" "),e("li",[t._v("响应报文\n"),e("ul",[e("li",[t._v("状态行")]),t._v(" "),e("li",[t._v("响应头")]),t._v(" "),e("li",[t._v("空行")]),t._v(" "),e("li",[t._v("响应体")])])])]),t._v(" "),e("h4",{attrs:{id:"http方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http方法","aria-hidden":"true"}},[t._v("#")]),t._v(" http方法")]),t._v(" "),e("ul",[e("li",[t._v("get  获取资源")]),t._v(" "),e("li",[t._v("post 传输资源")]),t._v(" "),e("li",[t._v("put 更新资源")]),t._v(" "),e("li",[t._v("delete 删除资源")]),t._v(" "),e("li",[t._v("head 获得报文首部")])]),t._v(" "),e("h4",{attrs:{id:"post-get-区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#post-get-区别","aria-hidden":"true"}},[t._v("#")]),t._v(" post get 区别")]),t._v(" "),e("ul",[e("li",[t._v("get在浏览器后退时是无害的，而post会重新发送请求")]),t._v(" "),e("li",[t._v("get请求会被浏览器主动缓存，而post不会，除非手动设置")]),t._v(" "),e("li",[t._v("get请求参数会完整的保留在浏览器历史记录里，而post不会")]),t._v(" "),e("li",[t._v("get在url中传送长度有限制，而post没有限制")]),t._v(" "),e("li",[t._v("get参数通过url传递，post参数通过request body传递")])]),t._v(" "),e("h4",{attrs:{id:"http状态码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http状态码","aria-hidden":"true"}},[t._v("#")]),t._v(" http状态码")]),t._v(" "),e("ul",[e("li",[t._v("1xx：指示信息，表示请求已接收，继续处理")]),t._v(" "),e("li",[t._v("2xx：成功，表示请求已经成功接收")]),t._v(" "),e("li",[t._v("3xx：重定向，要完成请求必须进行进一步的操作")]),t._v(" "),e("li",[t._v("4xx： 客户端错误，请求有语法错误或者请求无法实现")]),t._v(" "),e("li",[t._v("5xx：服务器错误，服务器无法实现合法的请求")])]),t._v(" "),e("h4",{attrs:{id:"什么是持久连接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是持久连接","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是持久连接")]),t._v(" "),e("ul",[e("li",[t._v("http协议采用‘请求-应答’模式，当使用普通模式，即非keep-alive模式时，每个请求应答客户端和服务器都要重新进行一次连接，完成之后立即断开连接，（http协议为无连接的协议）")]),t._v(" "),e("li",[t._v("当使用keep-alive模式时（又称持久连接，连接重用）时，keep-alive似的客户端到服务器的连接持续有效，当出现对服务器的后续请求时，keep-alive功能避免了建立或者重新建立连接（1.1版本才开始支持）")])]),t._v(" "),e("h4",{attrs:{id:"什么是管线化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是管线化","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是管线化")]),t._v(" "),e("ul",[e("li",[t._v("请求1 请求2 请求3  响应1 响应2 相应3")])]),t._v(" "),e("h5",{attrs:{id:"管线化特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#管线化特点","aria-hidden":"true"}},[t._v("#")]),t._v(" 管线化特点")]),t._v(" "),e("ul",[e("li",[t._v("通过持久连接完成，仅http/1.1支持")]),t._v(" "),e("li",[t._v("只有get和head请求可以支持，post有限制")]),t._v(" "),e("li",[t._v("初次创建连接时 ，不应该创建管线化，因为对方服务器不一定支持http/1.1版本")])]),t._v(" "),e("h2",{attrs:{id:"通信"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通信","aria-hidden":"true"}},[t._v("#")]),t._v(" 通信")]),t._v(" "),e("h4",{attrs:{id:"什么是同源策略及其限制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是同源策略及其限制","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是同源策略及其限制")]),t._v(" "),e("ul",[e("li",[t._v("同源策略限制从一个源加载的文档或脚本如何与另一个源的资源进行交互（这是一个用于隔离潜在恶意文件的关键的安全机制）")]),t._v(" "),e("li",[t._v("cookie localStorage indexDB无法获取")]),t._v(" "),e("li",[t._v("DOM无法获得，ajax请求不能发送")])]),t._v(" "),e("h4",{attrs:{id:"前后端如何通信"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前后端如何通信","aria-hidden":"true"}},[t._v("#")]),t._v(" 前后端如何通信")]),t._v(" "),e("ul",[e("li",[t._v("ajax（同源）")]),t._v(" "),e("li",[t._v("webSocket（不受同源策略限制）")]),t._v(" "),e("li",[t._v("CORS（支持跨域也支持同源）")])]),t._v(" "),e("h4",{attrs:{id:"如何创建ajax"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何创建ajax","aria-hidden":"true"}},[t._v("#")]),t._v(" 如何创建ajax")]),t._v(" "),e("h4",{attrs:{id:"跨域通信的几种方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#跨域通信的几种方式","aria-hidden":"true"}},[t._v("#")]),t._v(" 跨域通信的几种方式")]),t._v(" "),e("ul",[e("li",[t._v("jsonp")]),t._v(" "),e("li",[t._v("后端代理")])])])},[],!1,null,null,null);a.default=s.exports}}]);